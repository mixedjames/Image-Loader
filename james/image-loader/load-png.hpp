/*
  Image Loader
  Copyright (C) 2017 James Heggie

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#pragma once

namespace james {

  /**
   * Load a PNG stream into memory and store it in a `james::Image`.
   *
   * ### Preconditions
   * - src is a valid `std::istream` that points to the beginning of a PNG stream
   *
   * ### Post-conditions
   * Assuming no exceptions are thrown:
   * - src remains valid and points to just past the end of the PNG stream.
   * - src remains open
   * - a james::Image is returned which contains the data read from the stream
   * - the exception state of the istream src will be unchanged (but may have been
   *   modified & reset during execution)
   *
   * ### Exceptions
   * If an error occurs an exception will be thrown:
   * 1. If an IO error occurs during manipulation of src then the exception generated by
   *    the underlying stream will be propagated.
   * 2. If any other occurs, an exception catchable as `std::exception&` will be
   *    generated.
   *
   * LoadPNG provides the basic guarantee: if an exception is thrown, the system will be
   * in a valid state and further calls to LoadPNG may be made. However, the src stream
   * is in an undefined state.
   *
   * ### Thread safety
   * This function maintains no shared state & is therefore thread safe.
   */
  Image LoadPNG(std::istream& src);

}